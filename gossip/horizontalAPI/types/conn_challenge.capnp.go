// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

// Respond with a new challenge for the initial PoW on the horizontalApi.
type ConnChall capnp.Struct

// ConnChall_TypeID is the unique identifier for the type ConnChall.
const ConnChall_TypeID = 0xa38eefc82dcb0278

func NewConnChall(s *capnp.Segment) (ConnChall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConnChall(st), err
}

func NewRootConnChall(s *capnp.Segment) (ConnChall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConnChall(st), err
}

func ReadRootConnChall(msg *capnp.Message) (ConnChall, error) {
	root, err := msg.Root()
	return ConnChall(root.Struct()), err
}

func (s ConnChall) String() string {
	str, _ := text.Marshal(0xa38eefc82dcb0278, capnp.Struct(s))
	return str
}

func (s ConnChall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConnChall) DecodeFromPtr(p capnp.Ptr) ConnChall {
	return ConnChall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConnChall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConnChall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConnChall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConnChall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ConnChall) Cookie() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ConnChall) HasCookie() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ConnChall) SetCookie(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ConnChall_List is a list of ConnChall.
type ConnChall_List = capnp.StructList[ConnChall]

// NewConnChall creates a new list of ConnChall.
func NewConnChall_List(s *capnp.Segment, sz int32) (ConnChall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConnChall](l), err
}

// ConnChall_Future is a wrapper for a ConnChall promised by a client call.
type ConnChall_Future struct{ *capnp.Future }

func (f ConnChall_Future) Struct() (ConnChall, error) {
	p, err := f.Future.Ptr()
	return ConnChall(p.Struct()), err
}
