// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type HorizontalTypes uint16

// HorizontalTypes_TypeID is the unique identifier for the type HorizontalTypes.
const HorizontalTypes_TypeID = 0x96dbabe054fed2ce

// Values of HorizontalTypes.
const (
	HorizontalTypes_push HorizontalTypes = 0
)

// String returns the enum's constant name.
func (c HorizontalTypes) String() string {
	switch c {
	case HorizontalTypes_push:
		return "push"

	default:
		return ""
	}
}

// HorizontalTypesFromString returns the enum value with a name,
// or the zero value if there's no such value.
func HorizontalTypesFromString(c string) HorizontalTypes {
	switch c {
	case "push":
		return HorizontalTypes_push

	default:
		return 0
	}
}

type HorizontalTypes_List = capnp.EnumList[HorizontalTypes]

func NewHorizontalTypes_List(s *capnp.Segment, sz int32) (HorizontalTypes_List, error) {
	return capnp.NewEnumList[HorizontalTypes](s, sz)
}

type PushMsg capnp.Struct

// PushMsg_TypeID is the unique identifier for the type PushMsg.
const PushMsg_TypeID = 0xde7b10e381d611da

func NewPushMsg(s *capnp.Segment) (PushMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PushMsg(st), err
}

func NewRootPushMsg(s *capnp.Segment) (PushMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PushMsg(st), err
}

func ReadRootPushMsg(msg *capnp.Message) (PushMsg, error) {
	root, err := msg.Root()
	return PushMsg(root.Struct()), err
}

func (s PushMsg) String() string {
	str, _ := text.Marshal(0xde7b10e381d611da, capnp.Struct(s))
	return str
}

func (s PushMsg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PushMsg) DecodeFromPtr(p capnp.Ptr) PushMsg {
	return PushMsg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PushMsg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PushMsg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PushMsg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PushMsg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PushMsg) HorizontalType() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s PushMsg) SetHorizontalType(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s PushMsg) Ttl() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s PushMsg) SetTtl(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s PushMsg) GossipType() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s PushMsg) SetGossipType(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s PushMsg) MessageID() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s PushMsg) SetMessageID(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s PushMsg) Payload() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PushMsg) HasPayload() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PushMsg) SetPayload(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PushMsg_List is a list of PushMsg.
type PushMsg_List = capnp.StructList[PushMsg]

// NewPushMsg creates a new list of PushMsg.
func NewPushMsg_List(s *capnp.Segment, sz int32) (PushMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PushMsg](l), err
}

// PushMsg_Future is a wrapper for a PushMsg promised by a client call.
type PushMsg_Future struct{ *capnp.Future }

func (f PushMsg_Future) Struct() (PushMsg, error) {
	p, err := f.Future.Ptr()
	return PushMsg(p.Struct()), err
}

const schema_b58493dca0c0699d = "x\xdaD\x8e\xb1KrQ\x18\xc6\x9f\xe7\x9c\xebw\xe1" +
	"\x03\xf9<|\x17j\x13\x1a\x83\x0a\xd7\x96\"\x1aj\x08" +
	"<\xe1\xd4v\xb1\x8b\x0a\xe6\xbdx\xae\x83VTP`" +
	"\xd0P$AP\xe0\xd6\xd0\xdc\xde\xdc\xd0\xd0\xd0P\x11" +
	"A\x7f\x81c\x83\x9dPS\xb7\x97\xe7\xfd=\x0f\xbf\xd4" +
	"\xcd\xa2\x93IN\x08\x08=\x99\xf8c\x1f\x9f\xbes\x1f" +
	"\xb7\xaf\x17PJ\xd8\xeb\xd2}\xfb\xed\xfc\xf0\x0e`\xa6" +
	"\xf3\x97\xffI\x17P\xdd4h_\xd4\xf3\xc1gj\xfb" +
	"\x1dZ\x91c0\xd1':\x0f\xaa\xeb\x02\x99\xaf41" +
	"c\xe3z\x14\x98\xb9|(\xab\xc1l\xde\x8f*\xd1\xfc" +
	"JX-5\xc2J\xec\x97s\xbd\x1f\x90%\xb5C\x01" +
	"\xa8\xc44\xf0/\xaa\x99\xe2\xa8&F\xb5l\xcd\x14\xd7" +
	"La\x80{\xd2\x01\x1c\x02j\xb7\x01\xe8\x1dI\xdd\x14" +
	"T\xa4\xc7^x4\x05\xe8}I}\"\xa8\x84\xf0\xfa" +
	"\xe3\xc7\x1b\x80nJ\xea\x96\xa0\x92\xd2\xa3\x04\xd4\xd9:" +
	"\xa0O%\xf5\x95 \x1d\x8f\x0e\xa0.\x97\x00\xdd\x92\xd4" +
	"mA[\xfc\xb5\xc5\xc2\xc0\x97.\x04]\xd0\x8d\xe3\xf2" +
	"\xf0\xb6\x85\xd0\x98R\x94\xabC\x8e\x01\xbb\x15\x18\xe3\x17" +
	"\x82Upy\x98\xedE~\xbd\x1c\xfa\x9bLB0\x09" +
	"\xfe\x04\x00\x00\xff\xff4\xcaah"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b58493dca0c0699d,
		Nodes: []uint64{
			0x96dbabe054fed2ce,
			0xde7b10e381d611da,
		},
		Compressed: true,
	})
}
