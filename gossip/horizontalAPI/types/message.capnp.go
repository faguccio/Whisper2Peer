// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Message capnp.Struct
type Message_body Message
type Message_body_Which uint16

const (
	Message_body_Which_push  Message_body_Which = 0
	Message_body_Which_empty Message_body_Which = 1
)

func (w Message_body_Which) String() string {
	const s = "pushempty"
	switch w {
	case Message_body_Which_push:
		return s[0:4]
	case Message_body_Which_empty:
		return s[4:9]

	}
	return "Message_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xa5588519d0dba97f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xa5588519d0dba97f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Body() Message_body { return Message_body(s) }

func (s Message_body) Which() Message_body_Which {
	return Message_body_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_body) Push() (PushMsg, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != push")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PushMsg(p.Struct()), err
}

func (s Message_body) HasPush() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetPush(v PushMsg) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPush sets the push field to a newly
// allocated PushMsg struct, preferring placement in s's segment.
func (s Message_body) NewPush() (PushMsg, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPushMsg(capnp.Struct(s).Segment())
	if err != nil {
		return PushMsg{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) SetEmpty() {
	capnp.Struct(s).SetUint16(0, 1)

}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Body() Message_body_Future { return Message_body_Future{p.Future} }

// Message_body_Future is a wrapper for a Message_body promised by a client call.
type Message_body_Future struct{ *capnp.Future }

func (f Message_body_Future) Struct() (Message_body, error) {
	p, err := f.Future.Ptr()
	return Message_body(p.Struct()), err
}
func (p Message_body_Future) Push() PushMsg_Future {
	return PushMsg_Future{Future: p.Future.Field(0, nil)}
}

const schema_d06424cd5634d6a3 = "x\xda\\\x90\xbfk\x14A\x1c\xc5\xdf\xfb\xce&+\xc1" +
	"%\xb7\xdc5\x82\xa0\x1e\x114\xe2\xcf\xa4P\x1bEl" +
	"R\x04\xf2\x15O\x0e\xd1b\xf5\x86]\xe1\xd6\x1b\x98]" +
	"tAH\xe5_\"\x16v\xb6A\x10\x14DP\x02)" +
	"\xc4\xc6J\x1bS\xf9'8\xb2\x973\x11\xbb7\x8fy" +
	"\xf3yo:_\xaeG\x17\x93\x8f\x02\xd1\xe3s\xf3a" +
	"\xf3\xd5\xb7\x9d#\xcf\x87/\xa1=2\xbc\xf8\xbazg" +
	"{i\xb4\x839\xc6@w\x8d?\xba\x83\xa9R^\x03" +
	"\xc3\xca\xeb\xb7~\xf7\xf3\xc9\xf7\xd0\xa3\xe4At\xc0\x98" +
	"\x02\xac\x0c\xb8@\xb0{\x9fO\xc0pe\xeb\xfb\xc2\xf0" +
	"L\x7f\x1b\x9a\x92\xe1M?\xfc\x1a\x9c\x18\xee\xce\x1e\xde" +
	"\xe2\xa7\xee\x87\xa9z\xc7\x9f\xb8\x1c\xaa\xc6Y\x7f\xbe\xb4" +
	"\xe2}\x96\xdbs\x0f3\xf7\xd8]]\xb7\xde\xc7Yn" +
	"7H\x8dL\x04\xf0\x9f\x06i\xb2\x0cY|0\x195" +
	"\xfba\xf3\x7f\xb8=\xb57\x00=d\xa2\xc3!D\x04" +
	"\xd2\xd3\xcb\x80.\x19\xea\x05a\xc2\xdf\xa1\xc7\xd6={" +
	"\x09\xd0S\x86\xba*\\t\xb5/\xd89\x98\x00\xb2\x03" +
	"\x1e\xb3\xa5\xab\x1a\xcc\xcf\x80\xae\x16_\xcch\x1b\xb5/" +
	"\xd6}\x0e\xb4];m\xd7)*\xeb\x03z\xcfP\x0b" +
	"aJ\xee\x91\xec]@G\x86\xea\x84\xa9H\xaf\xfd\xba" +
	"\xb4\xbc\x05\xe8\xd8P\x9f\x0aiz4@Z\xdf\x00\xd4" +
	"\x19\xea3a\\Uc\xc6\x10\xc6`\xc8'\xde?r" +
	"\xb7\x1b\x18g\xf7\xcdro\xf0\x1ax\xf3\xaf\xb7\xe9\xb2" +
	"f<\xc9FL L\xc0?\x01\x00\x00\xff\xff\x10." +
	"\x80\xd4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d06424cd5634d6a3,
		Nodes: []uint64{
			0xa5588519d0dba97f,
			0xc225cbe873beb033,
			0xcd222b580ae1b939,
		},
		Compressed: true,
	})
}
