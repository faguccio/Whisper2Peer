// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

// Represents a generic message on the horizontalApi. Messagetype and length is done by capnproto somehow. empty might be removed in the future (union with only one member is not supported)
type Message capnp.Struct
type Message_body Message
type Message_body_Which uint16

const (
	Message_body_Which_push  Message_body_Which = 0
	Message_body_Which_empty Message_body_Which = 1
)

func (w Message_body_Which) String() string {
	const s = "pushempty"
	switch w {
	case Message_body_Which_push:
		return s[0:4]
	case Message_body_Which_empty:
		return s[4:9]

	}
	return "Message_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xa5588519d0dba97f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xa5588519d0dba97f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Body() Message_body { return Message_body(s) }

func (s Message_body) Which() Message_body_Which {
	return Message_body_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_body) Push() (PushMsg, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != push")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PushMsg(p.Struct()), err
}

func (s Message_body) HasPush() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetPush(v PushMsg) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPush sets the push field to a newly
// allocated PushMsg struct, preferring placement in s's segment.
func (s Message_body) NewPush() (PushMsg, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPushMsg(capnp.Struct(s).Segment())
	if err != nil {
		return PushMsg{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) SetEmpty() {
	capnp.Struct(s).SetUint16(0, 1)

}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Body() Message_body_Future { return Message_body_Future{p.Future} }

// Message_body_Future is a wrapper for a Message_body promised by a client call.
type Message_body_Future struct{ *capnp.Future }

func (f Message_body_Future) Struct() (Message_body, error) {
	p, err := f.Future.Ptr()
	return Message_body(p.Struct()), err
}
func (p Message_body_Future) Push() PushMsg_Future {
	return PushMsg_Future{Future: p.Future.Field(0, nil)}
}

const schema_d06424cd5634d6a3 = "x\xda\x84\x93O\x88\x1cE\x14\xc6\xdf\xab\x9eMk\xd8" +
	"a\xb7\xe9]\x89\x10\xe8\xe7\xb2\x82\xbb\x9a51^\x0c" +
	"B\x8cz\xd0\xc3B*\x9b\xc8\xa2\xaeX3]3]" +
	"\xd0\xddUtUgi/!\x82\x17\x8fz\xf1\xa6\xf8" +
	"\xe7\x10P\xf0*\xa2\x07\xc1\x8b\x12\xc8AsP\x04\xc7" +
	"\x8b\xc1\x83\x07\x8f\x82\x96\xf4Lo\x12d\xd8\x1c\xbb_" +
	"\xf5\xf7}\xf5{_\x9f|\x15\x9f\xe9\x9d\xea'\x010" +
	"\xbe\xbep\xc4_\xb9\xf6\xf3\x8d\x07\xdf\xda\xfd\x04\xf8\x0a" +
	"\xa2\xff\xe8\xe6\x93/]_Oo\xc0\x02\x86\x00q\x8d" +
	"\xbf\xc5W1\x8c\xafb\x12\xff\x83g\x01\xfd\xe9\xcf\xbf" +
	"\xb6\xb7\xbe\x7f\xf8\x1b\xe0\xc7\x11\xef||\x09Cd\x00" +
	"\xa7\x91\x1dE\xc0\xf8~\xb6\x0f\xe8\x9f\xfabrt\xf7" +
	"\xd1\xb5\xeb\xc0#D\xff\xe5\x9a\xff\xf3\xd2C\xbb\xb7:" +
	"\xe9\x1f\xd9w\xf1\x84\x85\xf1\x84%\xf1j\xf0;<\xe7" +
	"]c\xa4}\xbc\x90\xccZ1\x96[CaJsf" +
	"[Z\x1b\x8a\xb1<\x8f\xc8{\xc8\xfck\xef\xbe\xcf\xbf" +
	"\xba\xf9\xf6\xb7\xc0{\x0c\xcf\xe5\x88\x8b\x00\xa7\xf0\xa7\x05" +
	"\x7fA\x9aJZY>\xe0,\x09\x1a\xcbRVjH" +
	"\x85\x9c\x8a\x91.\xc9e\x922]\xa97t\xe9D~" +
	"\xce\xa8-\xda\x9eM[c\x12eJ\xb9,\xc7.#" +
	"e)\xd5\xa5\xa4AC\xd3\x10\x95v\x9a\xac.d\xa6" +
	"\xf7\xb7H\x16\xc65T\xa8q\xe6h \xa9\x92\x85\xbe" +
	",SR3\x87Q\xed\xeaJ\xd2#u\xa9tI\xfb" +
	"\xcae\xa4\xcb\xbc\xa1V\xaf\x90\xc5@V\xad|\xa9\x1d" +
	"\xd9\xda\x18]9\x19\xa4\x1b\x00\xbc\x17\xf4\x00\xf0.\xbe" +
	"Q\x7f\x13\xd8\xd2@\xa7\xcdm0\xc1\xff\xc1\xb4O\xed" +
	"\x09\x00~_\xd0[\xf4\xbe\x87\x00\xd1\xc6f\xb4\x91\xf0" +
	"\x8b\x01\xf2\xd7\x19\xf6\xf1_\xbf\x82\xed\xeb\xbd'\xa2\xbd" +
	"\x84\xbf\x17 \xff\x98\xe1\x92\xa9m6\x07\xe8\xf1)\xd0" +
	"\x08\xff\xf6\x07\xe4\x98jy\xber\xbe\xb6\xd9\xb6\x1d\xef" +
	"Qqv6\x00\xc0\xe5;\x1b\x06\xc4e\xc0d\xcaf" +
	"\x8e\xecc\xdd\x9e\xfe@or1\x94\x99\xce\x8f\xa4\xb2" +
	"\"\xab\xca\xa1\xa4{\xb32\xda\xda%5\xc8%\x84\x1d" +
	"\x0dS3\x9bu(\xbal\x00\xf3K\xb2\xde\x99\xbf\x89" +
	"\xb7K\xb20-I\xcb\xe0\xf0\x86\x00\x00_n73" +
	"\x05+\xd6\"\x91\xf0\x0f\x02\xe4\x9f2\x8c\x10g\\\xaf" +
	"\xbd\x1c}\x96\xf0\x1f\x02\xe4\xbf2\x8c\x18[i\x7f\x84" +
	"\xe8\x97\x0b\xd1$\xd9Y\xc4\x00w\x8e!C\x0cV0" +
	"\x00\x88W\xf1\xd9x\x15\x93\x9d\xa7\xdb\xc1\x0b\xc80t" +
	".\x9f\x93\xf9d\x97y\x93y\xa7\x0ay\xc2\xe9\x13a" +
	"\xae.\xcb3\x94\xe9}*D\xd9\xd0\xa8\xae\\&+" +
	"\xca\xb4\xb1d3]\xe7\xe9\xf4\x06\x07\x17\x1aH2\x95" +
	"6b\xbc$\x9cL\x010\x04\x86!\xa0\x1fkk\x95" +
	"\xb9\xd8@`\xe4\x1c\xebc]\x05>\x9c\x92&=\"" +
	"le\x8dh\xf2P\x8b\xbb\x85:\xa7\x17\x01\x9f?\xa4" +
	"J\x7fy\x95\xca\xd2\xa9\x91bC\xe1\xdaM\xebQ\x17" +
	"49hR\xa7x\xa55\xd1\"=$\xd5;^T" +
	"\x03\xe5*QaC\xb3\xe3\xd8f\xea\x03\xc3>\xe0\x7f" +
	"\x01\x00\x00\xff\xff\x15\x92x\x96"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d06424cd5634d6a3,
		Nodes: []uint64{
			0xa5588519d0dba97f,
			0xc225cbe873beb033,
			0xcd222b580ae1b939,
		},
		Compressed: true,
	})
}
