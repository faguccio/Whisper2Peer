// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

// Represents a generic message on the horizontalApi. Messagetype and length is done by capnproto somehow.
type Message capnp.Struct
type Message_body Message
type Message_body_Which uint16

const (
	Message_body_Which_push      Message_body_Which = 0
	Message_body_Which_connChall Message_body_Which = 1
	Message_body_Which_connPoW   Message_body_Which = 2
	Message_body_Which_connReq   Message_body_Which = 3
	Message_body_Which_powChall  Message_body_Which = 4
	Message_body_Which_powPoW    Message_body_Which = 5
	Message_body_Which_powReq    Message_body_Which = 6
)

func (w Message_body_Which) String() string {
	const s = "pushconnChallconnPoWconnReqpowChallpowPoWpowReq"
	switch w {
	case Message_body_Which_push:
		return s[0:4]
	case Message_body_Which_connChall:
		return s[4:13]
	case Message_body_Which_connPoW:
		return s[13:20]
	case Message_body_Which_connReq:
		return s[20:27]
	case Message_body_Which_powChall:
		return s[27:35]
	case Message_body_Which_powPoW:
		return s[35:41]
	case Message_body_Which_powReq:
		return s[41:47]

	}
	return "Message_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xa5588519d0dba97f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xa5588519d0dba97f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Body() Message_body { return Message_body(s) }

func (s Message_body) Which() Message_body_Which {
	return Message_body_Which(capnp.Struct(s).Uint16(0))
}
func (s Message_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_body) Push() (PushMsg, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != push")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PushMsg(p.Struct()), err
}

func (s Message_body) HasPush() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetPush(v PushMsg) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPush sets the push field to a newly
// allocated PushMsg struct, preferring placement in s's segment.
func (s Message_body) NewPush() (PushMsg, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPushMsg(capnp.Struct(s).Segment())
	if err != nil {
		return PushMsg{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) ConnChall() (ConnChall, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != connChall")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ConnChall(p.Struct()), err
}

func (s Message_body) HasConnChall() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetConnChall(v ConnChall) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewConnChall sets the connChall field to a newly
// allocated ConnChall struct, preferring placement in s's segment.
func (s Message_body) NewConnChall() (ConnChall, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewConnChall(capnp.Struct(s).Segment())
	if err != nil {
		return ConnChall{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) ConnPoW() (ConnPoW, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != connPoW")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ConnPoW(p.Struct()), err
}

func (s Message_body) HasConnPoW() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetConnPoW(v ConnPoW) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewConnPoW sets the connPoW field to a newly
// allocated ConnPoW struct, preferring placement in s's segment.
func (s Message_body) NewConnPoW() (ConnPoW, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewConnPoW(capnp.Struct(s).Segment())
	if err != nil {
		return ConnPoW{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) ConnReq() (ConnReq, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != connReq")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ConnReq(p.Struct()), err
}

func (s Message_body) HasConnReq() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetConnReq(v ConnReq) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewConnReq sets the connReq field to a newly
// allocated ConnReq struct, preferring placement in s's segment.
func (s Message_body) NewConnReq() (ConnReq, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewConnReq(capnp.Struct(s).Segment())
	if err != nil {
		return ConnReq{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) PowChall() (PowChall, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != powChall")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PowChall(p.Struct()), err
}

func (s Message_body) HasPowChall() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetPowChall(v PowChall) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPowChall sets the powChall field to a newly
// allocated PowChall struct, preferring placement in s's segment.
func (s Message_body) NewPowChall() (PowChall, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewPowChall(capnp.Struct(s).Segment())
	if err != nil {
		return PowChall{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) PowPoW() (PowPoW, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != powPoW")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PowPoW(p.Struct()), err
}

func (s Message_body) HasPowPoW() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetPowPoW(v PowPoW) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPowPoW sets the powPoW field to a newly
// allocated PowPoW struct, preferring placement in s's segment.
func (s Message_body) NewPowPoW() (PowPoW, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewPowPoW(capnp.Struct(s).Segment())
	if err != nil {
		return PowPoW{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message_body) PowReq() (PowReq, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != powReq")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PowReq(p.Struct()), err
}

func (s Message_body) HasPowReq() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_body) SetPowReq(v PowReq) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPowReq sets the powReq field to a newly
// allocated PowReq struct, preferring placement in s's segment.
func (s Message_body) NewPowReq() (PowReq, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewPowReq(capnp.Struct(s).Segment())
	if err != nil {
		return PowReq{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Body() Message_body_Future { return Message_body_Future{p.Future} }

// Message_body_Future is a wrapper for a Message_body promised by a client call.
type Message_body_Future struct{ *capnp.Future }

func (f Message_body_Future) Struct() (Message_body, error) {
	p, err := f.Future.Ptr()
	return Message_body(p.Struct()), err
}
func (p Message_body_Future) Push() PushMsg_Future {
	return PushMsg_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_body_Future) ConnChall() ConnChall_Future {
	return ConnChall_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_body_Future) ConnPoW() ConnPoW_Future {
	return ConnPoW_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_body_Future) ConnReq() ConnReq_Future {
	return ConnReq_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_body_Future) PowChall() PowChall_Future {
	return PowChall_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_body_Future) PowPoW() PowPoW_Future {
	return PowPoW_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_body_Future) PowReq() PowReq_Future {
	return PowReq_Future{Future: p.Future.Field(0, nil)}
}

const schema_d06424cd5634d6a3 = "x\xda\xe4Wo\x88\x1cg\x19\x7f\x9ewfw\xb2\xeb" +
	"-\x97\xf1\xdd\x83\xb4\x06\xe6m\xac\xd0\xc6&&^\x10" +
	"s\x04\xae\xb9\x13\xd4\xca\xc1\xcem\xeaF\xe5z\xce\xed" +
	"\xbe\xb7387\xef\xdc\xccl\xd6-\x96\x80\x18\x11\xc1" +
	"?T\xce\xa8%\xf4\x9f\x15\xa3V<k\xb0U\x14\x9a" +
	"*hC!V\x0d\xb4r\x90\x14\x82\xad\xf6\xac\xf6K" +
	"\xb9X\xfb\xca\xcc\xce\xce]\xd3\xcd^\xceo\xd2\x8f;" +
	"\xcf\xfb>\xbf\xe7\xfd=\xcf\xf3{\x9e\xdd\xf7\xa8r\xbb" +
	"\xba\xbf4\xae\x011\x8f\xe4\xf2\xf2\xb3\xe4\xdc\x9e\xdf\xbd" +
	"\xf2\xd5\x87A\x7f\x17\xca\xedwO\xddW\xfe\xd2\xb7\xef" +
	"\x87\x1cj\x00\xa3'\x94\xddH\x97\x14\x8d.)\x06\xfd" +
	"\xb32\x0e(\x8f\x9f\xfe\xcb\xf9\x1bN\x1c}\x04\xcc2" +
	"\xa2|\xf8\xc2\x81\x8f?ss\xe3|\xf7<=\xac\xbe" +
	"@\xa7T\x8dN\xa9\x06=\xa5\xc6\xc7\xf5\xa5\xcb\xfa\x89" +
	"\xd5\xaf\xfc\x14\xf4\x1bQ\xbe\x10>p\xaa\xb4t\xead" +
	"\xea\xfdA\xf5F\xa4\xcb\xaaF\x97U\x83\xfe+9\xfe" +
	"\xe4\xc9\xaf\xdf\xf3\xf7mw<\x06\xe6\x08\xa2,\xaf\xbc" +
	"\xf4\xc6\x93\xdf\xbb|o\xea}&\xf77\xea\xe44\xea" +
	"\xe4\x0c\xfa`\xae\x0d(G\x7f\xf2\xeb\xf0\xc5s\xef9" +
	"\x0b\xe6N\xdc\x10\xda\x9d\xa8%\x00\x0b\xf9\"\x02\x8e\xb6" +
	"\xf2_C@\xf9\xea\xc9\x0f\xb4N\xfb\x9fx\x0a\xf4\x1d" +
	"(\xcf\x9f{\xed\x87O\xbd\xfb\x07\x8f\x83\x1a{~\xa4" +
	"p\x85.\x174\xba\\0\x80\xc8?\x96\x7f\xde:\xf4" +
	"\xe3o\xfe\xa6\xfb\xc4\x97?\xf6\xc4\xec\xda\xb3\xaf\\H" +
	"\x83\xf8C\xe1y\xbaR\xd0\xe8J\xc1\xa0#\xc58\x88" +
	"\x83O\\*\x1e}\xef\xaeg\xc0\xd4\x11\xe5/w\xc9" +
	"\x7f\xdcy\xd3\xd1\x17\xd3\xe3\x97\x8aO\xd3\xd5\xa2FW" +
	"\x8b\x06\xbd\xe9\x1d\x7f\x05\x94\xee\xc8k\xf7\x1c\xf8\x02\xbf" +
	"\x0c\xfa\x0d(\x17?\xfc\xd8\xe3\x17\xef\xba\xef\xa1$\x8c" +
	"\xd1\xdf\x0f\x15\x91>7\xa4\xd1\xe7\x86\x0c\xf8\xa2\x8c:" +
	">\x0f\xdfW\x17\x8a\xe7\xcd\xd6m\xcbu\xb9\xd7\xe4{" +
	"\xeb\x96\xef\xf9c\x93\xc2\xf3&\x87\xe3\x8f\x15DSE" +
	"\"\xef\xfa\xc6\xfd\xe6\xaf.|\xf9\xb7`\xaa\x04\x0f\xef" +
	"C\x1c\x02\xd8\x8fcDN\xf3\xd0\x17^\x83im'" +
	"\xb2\x99\xc5<\xdef\x99;6/\x02\x16\xd9\x9c9\x9e" +
	"\x139\x96\xcb*\xa2\xc6\x84\x97|\xb2E\xe0\xdc-\xbc" +
	"h\xdcr\x0f\xfb\xce^\x00SUT\x00\x15\x01\xf4\xd2" +
	"\x98^2\xcc#\x0a\x9a\x9f&8^\x17\xe23\x0e\xef" +
	"\x13\xc6\x07\xd30\xbeC$\xf7\xeaA\xc7\x8fx\xa1\xc1" +
	"\x1aVd\xb1V\xc8\x1b\xcc\x8a\x12\xa4\xa0\x1b\"\x0fX" +
	"$\xd81\xcbu\x1aV\xc4\x13KE\xd4nc\x96\x1b" +
	"\x0a\x16\xf2\xe0\x18\x0f\x99\x15\xf6\x82W\x9a\x1c\x00K@" +
	"\xb0\x04\x98\x92\xb5\xc0I\x18Z\x19KS<\x0c5\xab" +
	"\xc9\xfbst{\x1a\xdc\x84\"\xa7\xb9\x1f\xf0\x90{C" +
	"Q\xc8,\xd6\xe4\x1e\x0f\x9c:[\xe0\x89\xb3\xab\xf9\xe8" +
	"\xd2\xc1\xa6\xba\xd6\x18\x98Y^\x83\xc5|F6sB" +
	"\xd6\x10\x1egs\x1d\x96\x04\x11\x88H\xb0P,p[" +
	"\xb4\xf7B\x8fD\xdcP\xbczi7\x90\xe19\xd1\xe8" +
	"\xa4\xaf\xf0\x85\xd2~K\xc6+\xa2=i[\xcaf\x09" +
	"\x9fXO\xf8\xb6\x81\x09\xf7y\xe0\x88\x86S\xef\x97\xf1" +
	"^\xc2\xff\x0f2^\x17\xc4\xf3f}\xd1^o\x8ca" +
	"\xaf\"j\xfdY\xba%\x8d\xee\x17(\xab\xdck\xc4\x80" +
	"\xb9\x84\x80-\xb5\xc1\xb6\x8c\x94[\xdf\xaf\xdf\x9a\x91\x82" +
	"X\xc6\xf8\xe3\xcc\x98>c\x98\xdfR\xd0\xfc.A\xc3" +
	"\x13^\xbd\x1fQ;\x93Pt|^&'X\xdb&" +
	"N\xddf\xa1p\xe3G'L(\xa2\x06\x80\x05 X" +
	"\x80\x01\x94\xdf\x96>\xeai\xcc(\xcfo\x95r\xc0\xb7" +
	"t\x92ru'\xc5\xbf\xe2*\x050w*\xea\x90\x94" +
	"\x09\x05gv\xebg\x0c\xf3\xa2\x82\xe6\xcb\x04K\xf8\x86" +
	"\xec\x92\xf0\xd2\xb4\xbejToA\x05\xab\x07\x90`\x89" +
	"\xfcG\x96\x91\x00\xd0\xfd8A\xf7\xa3Q\xb5cS\x14" +
	"\x9b\x94\xd7e\x19\x15\x00\xba\x88\x13t\x11\x8d\xea\xf7c" +
	"\xd3\xcfb\x93\xfaoYF\x15\x80.\xe3\x1d\xf4\x0c\x1a" +
	"\xd5\x7f\xc6\xa6\xd7cS\xee\x8a,c\x0e\x80\xae\xe1\x18" +
	"]C\xa3\xba\x8f(X=D\x08\x96\xf2k\xb2\x8cy" +
	"\x00z\x90\x8c\xd1\x83\xc4\xa8\xfa\xb1\xe9s\x84\xe0\xb0\xdf" +
	"\x0a\xed\x01\xc9\xb8\"{=O\x9cX\x09>Ui\x85" +
	"\xf6T\xd8\x9ca\x0b\xe3]\x03\x00n_\x97|@\xdc" +
	"\x0e(\xeb\xb1\x1a\xdb\x96\x0b\xe8\x0e\xc8\xcf\xb3\x98y\xcf" +
	"w\xbdO\xa6\xf7\xdc\x99Lk\x92\x8c9^tU5" +
	"b-\x01\xce\x86u\x17\xf8x\x0c\\\x11\xb5\x01\x95~" +
	"\xb6/hE\xd46\x85\xacA\x02\x99\x8d\xe4\x0d\x90\xd3" +
	"|q\xcb\x90\xd3|\xf1z!\xb3\x11\x99\xd2\xeb'\xd2" +
	"\xe7\xba\x89 m\x81\xdeJz\xef\x1a\xb8\x1b\x140\xa5" +
	"7\xdbV\xba\xc0\xe3\xbeho\x95\xddJres\xc4" +
	"\xf4\xa9\xd9\xae\xb1\x8e\xb8Ur+\xc9\x95\xebF\xcc\xd6" +
	"\xa0\x94\xdc\xde\xc8!\xed\xd9\x80/\xb6x\x18\xa5-?" +
	"\xdeu<x\xdc\xbc3\x1e7\xc9-G\xf3\x9a\xcc\xfa" +
	"_\x06\x0d\xee\x05\xd8\x18\xc6\xba\x98\xc7d*\x9bi\xf9" +
	"\xd9u-\xcf\xbfI\xcb\xafo\xc2\xbd\x1d\xc4\xdco\x91" +
	"\xd0\xeeq\xdaU4\x80\xfe\xac\xde\x9c\xe2\x7f\x1e\xb3\xa5" +
	"(\x97,E\xb1r\x0e\xde\x88b6\xb7glZ\xbb" +
	"t\xcb0\x1fP\xd0\xfc\x11A\xbdG\xe7\xe9O\xea\x8f" +
	"\x1a\xe6\x9f\x144/\x12\xd4\x09If\x82\xbe2\xad_" +
	"2\xaaC\xb1\xb6\xef@\x82\xa8t\xe7\xc1\x08N\xd0\x11" +
	"4\xaa\x87b\xc3G\x90\xa0\x16E\xee\x80b\xdcMd" +
	"\xe4,\xf0=\x91\xd8\xa3\xb9\xce1>\xc6l\xd1f\x0b" +
	"\x96\xd7a\xf3\xad \xb2y\xc0l\xe1\x87,\xb4E\xcb" +
	"M\x0a&{\xd0\x1cg~ |\xab9lE\xbc\x01" +
	"\x80y \x98\x07\x94M\x11\x86\x8e\x7f\xa4\x03\x8a\xdf/" +
	"];\xd2\xc4?\x940\xcd\xc4<\xc3\xa4\xf4\xac\x8e\xab" +
	"\x09+v\xa4\x01A\x0d\xb2\xae\xfd(\xe0\x87\x06\x14\xd0" +
	"\xab\xd2ip/r\xe6\x1dR\xb7\"Gx\xb1\xcbn" +
	"\xa0Fo\xfe\xa4\x1e\x8f\xc7 \xc2j\x0c\x88\xea^i" +
	"\x05sN\x14X\x01vX\xf786\xfa\xacP\xf1?" +
	"\x8c77\x7f\xaa\xd8\xd7\xaa\x92\x1e\xe3\xc5\xcd\xdb\x7f\xc0" +
	"F\x95\x96\x0d\xfe7\x00\x00\xff\xff\xf7\xafq\x98"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d06424cd5634d6a3,
		Nodes: []uint64{
			0xa38eefc82dcb0278,
			0xa5588519d0dba97f,
			0xb28ded8511e59511,
			0xb34a08eb7d9097c1,
			0xc225cbe873beb033,
			0xc35970a9753697f2,
			0xc496ae3c75b714d3,
			0xcd222b580ae1b939,
			0xe56584347df7156c,
		},
		Compressed: true,
	})
}
