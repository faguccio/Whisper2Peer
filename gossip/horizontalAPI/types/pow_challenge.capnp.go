// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

// Respond with a new challenge for the periodic PoW on the horizontalApi.
type PowChall capnp.Struct

// PowChall_TypeID is the unique identifier for the type PowChall.
const PowChall_TypeID = 0xb28ded8511e59511

func NewPowChall(s *capnp.Segment) (PowChall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PowChall(st), err
}

func NewRootPowChall(s *capnp.Segment) (PowChall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PowChall(st), err
}

func ReadRootPowChall(msg *capnp.Message) (PowChall, error) {
	root, err := msg.Root()
	return PowChall(root.Struct()), err
}

func (s PowChall) String() string {
	str, _ := text.Marshal(0xb28ded8511e59511, capnp.Struct(s))
	return str
}

func (s PowChall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PowChall) DecodeFromPtr(p capnp.Ptr) PowChall {
	return PowChall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PowChall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PowChall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PowChall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PowChall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PowChall) Cookie() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PowChall) HasCookie() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PowChall) SetCookie(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PowChall_List is a list of PowChall.
type PowChall_List = capnp.StructList[PowChall]

// NewPowChall creates a new list of PowChall.
func NewPowChall_List(s *capnp.Segment, sz int32) (PowChall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PowChall](l), err
}

// PowChall_Future is a wrapper for a PowChall promised by a client call.
type PowChall_Future struct{ *capnp.Future }

func (f PowChall_Future) Struct() (PowChall, error) {
	p, err := f.Future.Ptr()
	return PowChall(p.Struct()), err
}
