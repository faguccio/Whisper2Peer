// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

// Send the PoW for the periodic PoW on the horizontalApi.
type PowPoW capnp.Struct

// PowPoW_TypeID is the unique identifier for the type PowPoW.
const PowPoW_TypeID = 0xc496ae3c75b714d3

func NewPowPoW(s *capnp.Segment) (PowPoW, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PowPoW(st), err
}

func NewRootPowPoW(s *capnp.Segment) (PowPoW, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PowPoW(st), err
}

func ReadRootPowPoW(msg *capnp.Message) (PowPoW, error) {
	root, err := msg.Root()
	return PowPoW(root.Struct()), err
}

func (s PowPoW) String() string {
	str, _ := text.Marshal(0xc496ae3c75b714d3, capnp.Struct(s))
	return str
}

func (s PowPoW) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PowPoW) DecodeFromPtr(p capnp.Ptr) PowPoW {
	return PowPoW(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PowPoW) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PowPoW) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PowPoW) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PowPoW) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PowPoW) Nonce() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s PowPoW) SetNonce(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s PowPoW) Cookie() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PowPoW) HasCookie() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PowPoW) SetCookie(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PowPoW_List is a list of PowPoW.
type PowPoW_List = capnp.StructList[PowPoW]

// NewPowPoW creates a new list of PowPoW.
func NewPowPoW_List(s *capnp.Segment, sz int32) (PowPoW_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PowPoW](l), err
}

// PowPoW_Future is a wrapper for a PowPoW promised by a client call.
type PowPoW_Future struct{ *capnp.Future }

func (f PowPoW_Future) Struct() (PowPoW, error) {
	p, err := f.Future.Ptr()
	return PowPoW(p.Struct()), err
}
