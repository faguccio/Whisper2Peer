// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

// Requesting a challenge for the initial PoW on the horizontalApi.
type ConnReq capnp.Struct

// ConnReq_TypeID is the unique identifier for the type ConnReq.
const ConnReq_TypeID = 0xe56584347df7156c

func NewConnReq(s *capnp.Segment) (ConnReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ConnReq(st), err
}

func NewRootConnReq(s *capnp.Segment) (ConnReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ConnReq(st), err
}

func ReadRootConnReq(msg *capnp.Message) (ConnReq, error) {
	root, err := msg.Root()
	return ConnReq(root.Struct()), err
}

func (s ConnReq) String() string {
	str, _ := text.Marshal(0xe56584347df7156c, capnp.Struct(s))
	return str
}

func (s ConnReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConnReq) DecodeFromPtr(p capnp.Ptr) ConnReq {
	return ConnReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConnReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConnReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConnReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConnReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ConnReq_List is a list of ConnReq.
type ConnReq_List = capnp.StructList[ConnReq]

// NewConnReq creates a new list of ConnReq.
func NewConnReq_List(s *capnp.Segment, sz int32) (ConnReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ConnReq](l), err
}

// ConnReq_Future is a wrapper for a ConnReq promised by a client call.
type ConnReq_Future struct{ *capnp.Future }

func (f ConnReq_Future) Struct() (ConnReq, error) {
	p, err := f.Future.Ptr()
	return ConnReq(p.Struct()), err
}
